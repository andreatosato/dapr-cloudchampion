@page "/"
@using Services
@using ViewModels
@using Microsoft.AspNetCore.SignalR.Client
@inject OrderService orderService
@*@inject NavigationManager navigationManager*@

<h3>Order</h3>

<EditForm Model="@OrderToInsert" OnSubmit="@OrderAsync" class="form">
    <div class="form-group">
        <label for="quantity">Quantity:</label>
        <InputNumber @bind-Value="@OrderToInsert.Quantity" DisplayName="Quantity" id="quantity"></InputNumber>
    </div>
    <div class="form-group">
        <label for="productName">Product Name:</label>
        <InputText @bind-Value="@OrderToInsert.ProductName" DisplayName="Product Name" id="productName"></InputText>
    </div>
    <button type="submit" class="btn btn-primary">Order</button>
</EditForm>

<div class="row" style="padding-top:40px;">
    <button @onclick="LatestOrderStatusAsync" class="btn btn-info">Refresh Status</button>
</div>
@if (LatestOrderStatus != null)
{
    <div class="row">
        <table style="padding:20px;" class="table">
            <tr>
                <td><b>Order Status</b></td>
                <td>
                    @if (LatestOrderStatus.OrderStatus == OrderStatus.Completed)
                    {
                        <b><mark>@(Enum.GetName(LatestOrderStatus.OrderStatus))</mark></b>
                    }
                    else
                    {
                        @(Enum.GetName(LatestOrderStatus.OrderStatus))
                    }
                </td>
            </tr>
            <tr>
                <td><b>Order Create Date</b></td>
                <td>@LatestOrderStatus.CreatedDate.ToString("F")</td>
            </tr>
        </table>
    </div>
}

@if (Events.Count > 0)
{
    <table class="table">
        @foreach (var e in Events)
        {
            <tr>
                <td>@(e.OrderId)</td>
                <td>@(e.OrderStatus)</td>
            </tr>
        }
    </table>
}


@code {
    public InsertOrderViewModel OrderToInsert { get; set; } = new InsertOrderViewModel();
    private Guid latestOrderId = Guid.Empty;
    public StatusOrderViewModel LatestOrderStatus { get; set; }
    public List<OrderEvent> Events { get; set; } = new List<OrderEvent>();

    protected override async Task OnInitializedAsync()
    {
        var url = "http://cloudchampion-web/notification";
        var connection = new HubConnectionBuilder()
            .WithUrl(url)
            .WithAutomaticReconnect()
            .Build();
        connection.On<OrderEvent>("orderstatus", OnOrderStatus);
        connection.On<OrderEvent>("orderprocessed", OnOrderProcessed);
        await connection.StartAsync();
    }

    public async Task OrderAsync()
    {
        latestOrderId = Guid.NewGuid();
        OrderToInsert.OrderId = latestOrderId;
        await orderService.InsertOrder(OrderToInsert);
    }

    private async Task LatestOrderStatusAsync()
    {
        if (latestOrderId != Guid.Empty)
        {
            LatestOrderStatus = await orderService.GetStatusOrder(latestOrderId);
            StateHasChanged();
        }
    }

    private async Task OnOrderProcessed(OrderEvent @event)
    {
        Events.Add(@event);
        StateHasChanged();
    }

    private async Task OnOrderStatus(OrderEvent @event)
    {
        Events.Add(@event);
        StateHasChanged();
    }
}
